{"version":3,"sources":["service/socket.js","components/UserList.js","components/ChatBox.js","components/Chatroom.js"],"names":["socketIOClient","UserList","listUser","props","activeUser","map","user","username","id","class","this","Component","ChatBox","listMsgs","msgLog","msg","className","time","text","Chatroom","state","counter","input","onSubmit","e","preventDefault","socket","emit","name","setState","onChange","target","value","io","on","err","console","log","list","type","placeholder"],"mappings":"2OAIeA,E,MAAAA,GAFE,0CCkBFC,G,OAlBf,4MAEEC,SAAW,WACT,OAAO,EAAKC,MAAMC,WAAWC,KAAI,SAACC,GAChC,OAAO,6BAAmBA,EAAKC,UAAfD,EAAKE,QAJ3B,uDASI,OACE,sBAAKC,MAAM,eAAX,UACE,uCACA,oBAAID,GAAG,QAAP,SAAgBE,KAAKR,oBAZ7B,GAA8BS,cCyBfC,EAzBf,4MAEEC,SAAW,WACT,OAAO,EAAKV,MAAMW,OAAOT,KAAI,SAACU,GAC5B,OAAO,sBAAKC,UAAU,UAAf,UACL,oBAAGA,UAAU,OAAb,UACGD,EAAIR,SAAU,IACf,+BACGQ,EAAIE,UAGT,mBAAGD,UAAU,OAAb,SACGD,EAAIG,SAR4BH,EAAIP,QAJ/C,uDAmBI,OACE,qBAAKQ,UAAU,gBAAf,SAAgCN,KAAKG,iBApB3C,GAA6BF,aCMhBQ,EAAb,4MAEEC,MAAQ,CAENC,QAAS,EACTC,MAAO,GACPR,OAAQ,GACRV,WAAY,IAPhB,EA6BEmB,SAAW,SAACC,GACVA,EAAEC,iBACFC,EAAOC,KAAK,gBAAiB,CAACC,KAAK,EAAKzB,MAAMI,SAAUW,KAAK,EAAKE,MAAME,QAExE,EAAKO,SAAS,CAAEP,MAAO,MAjC3B,EAoCEQ,SAAW,SAACN,GAAD,OAAO,EAAKK,SAAS,CAAEP,MAAOE,EAAEO,OAAOC,SApCpD,kEAUsB,IAAD,OAEjBN,EAAOO,GAAGC,GAAG,SAAS,SAASC,GAE7BC,QAAQC,IAAI,iCAGdX,EAAOC,KAAK,WAAY,CAACpB,SAAUG,KAAKP,MAAMI,WAE9CmB,EAAOQ,GAAG,WAAW,YAA6B,IAA3B3B,EAA0B,EAA1BA,SAAUW,EAAgB,EAAhBA,KAAMD,EAAU,EAAVA,KACrC,EAAKY,SAAS,CAAER,QAAS,EAAKD,MAAMC,QAAQ,EAAGP,OAAO,GAAD,mBAAM,EAAKM,MAAMN,QAAjB,CAAyB,CAACN,GAAI,EAAKY,MAAMC,QAC5Fd,SAAUA,EAAUW,KAAMA,EAAMD,KAAKA,UAGzCS,EAAOQ,GAAG,cAAc,SAAAI,GACtB,EAAKT,SAAS,CAACzB,WAAYkC,SAzBjC,+BAuCI,OACE,sBAAKtB,UAAU,iBAAf,UACE,wBAAQA,UAAU,cAAlB,SACE,4CAEF,uBAAMA,UAAU,YAAhB,UACE,cAAC,EAAD,CAAUZ,WAAYM,KAAKU,MAAMhB,aACjC,cAAC,EAAD,CAASU,OAAQJ,KAAKU,MAAMN,YAE9B,qBAAKE,UAAU,sBAAf,SACE,sBAAMO,SAAUb,KAAKa,SAArB,SACE,uBAAOgB,KAAK,OAAOC,YAAY,iCAAiCR,MAAOtB,KAAKU,MAAME,MAAOQ,SAAUpB,KAAKoB,sBAlDpH,GAA8BnB,aA0DfQ","file":"static/js/4.0bb2860d.chunk.js","sourcesContent":["import socketIOClient from \"socket.io-client\";\r\n\r\nconst ENDPOINT = \"https://brian-messenger.herokuapp.com/\";\r\n\r\nexport default socketIOClient(ENDPOINT);","import React, { Component } from 'react'\r\n\r\nexport class UserList extends Component {\r\n\r\n  listUser = () => {\r\n    return this.props.activeUser.map((user) => {\r\n      return <li key={user.id}>{user.username}</li>\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"chat-sidebar\">\r\n        <h3>Users</h3>\r\n        <ul id='users'>{this.listUser()}</ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UserList\r\n","import React, { Component } from 'react';\r\n\r\nexport class ChatBox extends Component {\r\n\r\n  listMsgs = () => {\r\n    return this.props.msgLog.map((msg) => {\r\n      return <div className='message' key={msg.id}>\r\n        <p className='meta'>\r\n          {msg.username+ ' '}\r\n          <span>\r\n            {msg.time}\r\n          </span>\r\n        </p>\r\n        <p className='text'>\r\n          {msg.text}\r\n        </p>      \r\n      </div>\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='chat-messages'>{this.listMsgs()}</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ChatBox\r\n","import React, { Component } from 'react'\r\nimport socket from '../service/socket';\r\n\r\nimport './css/ChatRoom.css';\r\n\r\nimport UserList from './UserList';\r\nimport ChatBox from './ChatBox';\r\n\r\nexport class Chatroom extends Component {\r\n\r\n  state = {\r\n    //counter provides unique id for map function in chatLog\r\n    counter: 1,\r\n    input: \"\",\r\n    msgLog: [],\r\n    activeUser: []\r\n  }\r\n\r\n  componentDidMount(){\r\n\r\n    socket.io.on('error', function(err) {\r\n      // handle server error here\r\n      console.log('Error connecting to server');\r\n    });\r\n\r\n    socket.emit('username', {username: this.props.username});\r\n\r\n    socket.on('message', ({username, text, time}) => {\r\n      this.setState({ counter: this.state.counter+1, msgLog: [...this.state.msgLog, {id: this.state.counter, \r\n        username: username, text: text, time:time}] });\r\n    })\r\n\r\n    socket.on('activeUser', list => {\r\n      this.setState({activeUser: list});\r\n    })\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    socket.emit('clientMessage', {name:this.props.username, text:this.state.input});\r\n\r\n    this.setState({ input: \"\" });\r\n  }\r\n\r\n  onChange = (e) => this.setState({ input: e.target.value });\r\n\r\n  render() {\r\n    return (\r\n      <div className='chat-container'>\r\n        <header className='chat-header'>\r\n          <h1>ChatRoom</h1>\r\n        </header>\r\n        <main className='chat-main'>\r\n          <UserList activeUser={this.state.activeUser} />\r\n          <ChatBox msgLog={this.state.msgLog} />\r\n        </main>\r\n        <div className='chat-form-container'>\r\n          <form onSubmit={this.onSubmit}>\r\n            <input type=\"text\" placeholder=\"Please enter your messages ...\" value={this.state.input} onChange={this.onChange}/>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Chatroom\r\n"],"sourceRoot":""}