{"version":3,"sources":["service/socket.js","components/Chatroom.js"],"names":["socketIOClient","Chatroom","state","counter","text","msgLog","activeUser","chatLog","className","map","log","msg","id","onSubmit","e","preventDefault","socket","emit","name","props","username","setState","onChange","target","value","io","on","err","console","this","list","style","textAlign","type","placeholder","Component"],"mappings":"qNAIeA,E,MAAAA,GAFE,0CCCJC,EAAb,4MAEEC,MAAQ,CAENC,QAAS,EACTC,KAAM,GACNC,OAAQ,GACRC,WAAY,IAPhB,EA4BEC,QAAU,WACR,OAAO,qBAAKC,UAAU,UAAf,SAA0B,EAAKN,MAAMG,OAAOI,KAAI,SAACC,GACtD,OAAO,4BAAiBA,EAAIC,KAAbD,EAAIE,UA9BzB,EAkCEC,SAAW,SAACC,GACVA,EAAEC,iBACFC,EAAOC,KAAK,gBAAiB,CAACC,KAAK,EAAKC,MAAMC,SAAUhB,KAAK,EAAKF,MAAME,OAExE,EAAKiB,SAAS,CAAEjB,KAAM,MAtC1B,EAyCEkB,SAAW,SAACR,GAAD,OAAO,EAAKO,SAAS,CAAEjB,KAAMU,EAAES,OAAOC,SAzCnD,kEAUsB,IAAD,OAEjBR,EAAOS,GAAGC,GAAG,SAAS,SAASC,GAE7BC,QAAQlB,IAAI,iCAGdM,EAAOC,KAAK,WAAY,CAACG,SAAUS,KAAKV,MAAMC,WAE9CJ,EAAOU,GAAG,WAAW,SAAAf,GACnB,EAAKU,SAAS,CAAElB,QAAS,EAAKD,MAAMC,QAAQ,EAAGE,OAAO,GAAD,mBAAM,EAAKH,MAAMG,QAAjB,CAAyB,CAACO,GAAI,EAAKV,MAAMC,QAASQ,IAAKA,UAG9GK,EAAOU,GAAG,cAAc,SAAAI,GACtB,EAAKT,SAAS,CAACf,WAAYwB,SAxBjC,+BA4CI,OACE,sBAAKC,MAAO,CAAEC,UAAU,UAAxB,UACE,0CACCH,KAAKtB,UACN,sBAAMM,SAAUgB,KAAKhB,SAArB,SACA,uBAAOoB,KAAK,OAAOC,YAAY,iCAAiCV,MAAOK,KAAK3B,MAAME,KAAMkB,SAAUO,KAAKP,oBAjD/G,GAA8Ba,aAwDflC","file":"static/js/4.92c814f5.chunk.js","sourcesContent":["import socketIOClient from \"socket.io-client\";\r\n\r\nconst ENDPOINT = \"https://brian-messenger.herokuapp.com/\";\r\n\r\nexport default socketIOClient(ENDPOINT);","import React, { Component } from 'react'\r\nimport socket from '../service/socket';\r\n\r\nexport class Chatroom extends Component {\r\n\r\n  state = {\r\n    //counter provides unique id for map function in chatLog\r\n    counter: 1,\r\n    text: \"\",\r\n    msgLog: [],\r\n    activeUser: []\r\n  }\r\n\r\n  componentDidMount(){\r\n\r\n    socket.io.on('error', function(err) {\r\n      // handle server error here\r\n      console.log('Error connecting to server');\r\n    });\r\n\r\n    socket.emit('username', {username: this.props.username});\r\n\r\n    socket.on('message', msg => {\r\n      this.setState({ counter: this.state.counter+1, msgLog: [...this.state.msgLog, {id: this.state.counter, msg: msg}] });\r\n    })\r\n\r\n    socket.on('activeUser', list => {\r\n      this.setState({activeUser: list});\r\n    })\r\n  }\r\n\r\n  chatLog = () => {\r\n    return <div className='chatBox'>{this.state.msgLog.map((log) => {\r\n      return <p key={log.id}>{log.msg}</p>\r\n    })}</div>\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    socket.emit('clientMessage', {name:this.props.username, text:this.state.text});\r\n\r\n    this.setState({ text: \"\" });\r\n  }\r\n\r\n  onChange = (e) => this.setState({ text: e.target.value });\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ textAlign:'center' }}>\r\n        <h1>ChatRoom</h1>\r\n        {this.chatLog()}\r\n        <form onSubmit={this.onSubmit}>\r\n        <input type=\"text\" placeholder=\"Please enter your messages ...\" value={this.state.text} onChange={this.onChange}/>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Chatroom\r\n"],"sourceRoot":""}